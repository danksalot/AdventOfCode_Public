numbers = [
[[[5,3],[[8,6],[7,1]]],[8,0]],
[2,[[3,6],[[3,6],1]]],
[9,[[[7,1],3],3]],
[[[3,[3,9]],[3,9]],[[[7,4],4],3]],
[[[[1,8],[9,6]],[[1,1],2]],[[[3,1],4],6]],
[[[[4,0],[2,5]],[9,4]],[[[6,9],[0,1]],1]],
[[1,[[3,7],[5,3]]],[[[9,9],[9,6]],[0,9]]],
[[[2,[9,9]],[3,3]],[[[5,1],1],[9,0]]],
[3,[3,9]],
[[[[1,6],[4,3]],3],[[9,[4,0]],[[2,0],4]]],
[[2,[6,7]],[6,2]],
[[[9,[3,3]],[5,[8,7]]],[9,[[7,7],[0,6]]]],
[[[4,[7,5]],[9,[9,0]]],0],
[7,[[3,8],8]],
[[[7,0],[9,9]],8],
[4,[[[9,4],[8,1]],[2,[3,5]]]],
[[[2,6],[5,[5,5]]],[[[7,0],[2,2]],[9,8]]],
[[0,[0,[1,1]]],9],
[[[2,[7,9]],1],[8,[[8,8],[6,8]]]],
[[8,[[5,3],[4,4]]],[0,[2,[3,7]]]],
[[[2,[1,3]],5],[[9,[9,8]],[[8,4],[9,7]]]],
[[[9,9],[[0,1],[6,2]]],4],
[[[0,3],[[8,0],4]],[[7,5],2]],
[[[0,[1,7]],4],[[7,4],[[0,6],[2,8]]]],
[[[2,[8,3]],1],[[[5,6],9],[[6,8],[3,9]]]],
[[[0,[5,9]],[7,7]],[4,[[2,3],[6,8]]]],
[[2,[9,7]],[5,0]],
[[1,[[8,1],[1,7]]],[3,5]],
[[[[2,7],0],[[8,6],[0,4]]],[[1,[5,5]],[[0,1],[2,8]]]],
[[0,4],[[1,1],[9,[6,2]]]],
[[[6,[6,0]],7],[3,[4,[3,7]]]],
[[[3,[9,6]],0],9],
[6,[[7,[1,6]],[7,8]]],
[[4,[8,[6,6]]],[[[0,1],1],[6,[9,0]]]],
[[[8,4],[2,[6,0]]],[[9,5],[[7,9],0]]],
[[[7,7],[[7,3],9]],[[3,7],6]],
[[7,[9,0]],5],
[[1,5],[2,[[6,4],[5,0]]]],
[0,[[0,6],[[5,1],7]]],
[[3,0],9],
[1,[8,[[9,8],[6,5]]]],
[[[7,8],[0,[8,2]]],[1,[1,[2,4]]]],
[[[2,[5,6]],3],[[4,[9,5]],[9,8]]],
[[[[0,0],[8,7]],[[9,1],2]],[[9,[6,9]],4]],
[8,[[9,6],[[2,4],5]]],
[[[2,[0,4]],[2,[3,7]]],[[[8,1],[9,4]],4]],
[8,2],
[[[3,7],0],7],
[[0,1],[[2,4],[1,5]]],
[[6,[2,2]],[[[3,3],1],[[4,0],6]]],
[2,[[5,8],6]],
[7,[5,[5,5]]],
[[1,[[2,4],0]],[[2,[8,3]],[4,[3,7]]]],
[[[5,1],[[7,6],3]],[[[4,8],[5,9]],8]],
[[[8,[3,5]],[[1,8],[0,3]]],[[0,[1,8]],[6,8]]],
[[[[0,8],8],[[0,5],[7,6]]],[2,1]],
[5,[4,[7,0]]],
[[7,[[6,5],[5,2]]],[4,6]],
[[2,6],[[2,1],[[2,3],[2,3]]]],
[[[0,[4,9]],[3,[8,9]]],[[[9,0],[6,2]],[2,1]]],
[6,[6,[0,[3,1]]]],
[[[9,8],[[4,9],8]],[[[3,2],[9,1]],5]],
[[[[2,6],[0,9]],[2,7]],[1,[9,2]]],
[[[5,[7,9]],[[2,3],2]],[[[9,5],0],[[9,6],[3,3]]]],
[[[[6,3],[2,1]],[[7,6],[6,8]]],[[[0,2],[8,0]],[0,[9,5]]]],
[[[[2,0],0],1],[4,[[3,6],[3,1]]]],
[[[3,1],[5,0]],[[[3,3],[0,2]],[5,8]]],
[[[[1,0],8],[[2,3],[2,1]]],[[4,[5,5]],[[9,8],3]]],
[[[8,[0,5]],[9,9]],[[[7,0],1],[[7,2],7]]],
[[[[3,0],4],7],[[3,9],[4,[9,7]]]],
[[[8,3],0],[6,5]],
[[2,[[3,8],6]],[[[3,2],[1,4]],[[1,6],[9,4]]]],
[[[[6,2],[4,7]],[3,9]],[[1,[6,5]],4]],
[[[[8,3],2],[8,2]],5],
[[[9,[9,0]],[4,7]],[[[5,9],2],6]],
[4,[[6,0],3]],
[[[5,9],[8,3]],0],
[[[[6,1],[4,8]],[9,[1,6]]],1],
[[[8,5],[2,2]],6],
[2,[5,[[5,7],[6,0]]]],
[[[[3,6],[2,3]],6],[[6,[6,5]],[[6,4],[6,9]]]],
[[4,[[1,3],1]],1],
[[2,[7,[4,3]]],0],
[[8,[[1,1],1]],[[4,1],[[9,6],[1,3]]]],
[[8,1],[3,[2,[5,7]]]],
[8,[[[2,4],[8,3]],[[8,7],[2,8]]]],
[[0,[[5,7],8]],[[3,[6,6]],[0,8]]],
[7,[[1,3],[2,4]]],
[[[2,0],[0,1]],[[[8,9],[7,0]],[3,6]]],
[[[1,6],[[6,9],[6,3]]],[2,[1,1]]],
[[1,[7,[8,1]]],[[[0,3],[9,1]],[[1,5],2]]],
[[[[1,3],2],1],[[[0,4],5],[[5,0],[1,1]]]],
[[[2,[0,1]],[5,6]],4],
[[8,3],[[6,4],[[0,9],5]]],
[[[[2,7],4],[7,0]],[[[6,7],2],[3,8]]],
[[[[9,3],9],[[2,9],[9,0]]],[[[7,5],3],[[8,8],8]]],
[[[[0,1],[8,4]],[4,[8,5]]],[2,[1,[0,2]]]],
[[5,[[3,5],[9,2]]],[[[2,2],3],[[4,7],3]]],
[[[7,8],8],2],
[9,[2,1]]
]

from copy import deepcopy

class SnailNumber:
	value = []

	def __init__(self, value):
		self.value = value
		self.reduce()

	def addNumber(self, newNum):
		self.value = [self.value, newNum]
		self.value = self.reduce()

	def reduce(self):
		workingCopy = deepcopy(self.value)
		keepGoing = True
		while keepGoing:
			keepGoing = False			

			# Check if any numbers should explode
			openSet = [(0,workingCopy,[])]
			while openSet:
				levelsDeep,v,p = openSet.pop()
				if not isinstance(v, list):
					continue
				else:
					if levelsDeep >= 4:
						for a, idx in p:
							if idx > 0:
								while isinstance(a[idx-1], list):
									a = a[idx-1]
									idx = len(a)
								a[idx-1] += v[0]
								break
						for a, idx in p:
							if idx < len(a)-1:
								while isinstance(a[idx+1], list):
									a = a[idx+1]
									idx = -1
								a[idx+1] += v[1]
								break
						p[0][0][p[0][1]] = 0
						keepGoing = True
						break
					else:
						for i, subNum in list(enumerate(v))[::-1]:
							print('Explode - Adding to stack:', (levelsDeep + 1, subNum, [[v,i]] + p))
							openSet.append((levelsDeep + 1, subNum, [[v,i]] + p))

			if keepGoing:
				continue

			# Check if any numbers should split
			openSet = [(0,workingCopy,None,None)]
			while len(openSet) > 0:
				n,v,p,index = openSet.pop()
				if isinstance(v, list):
					for i, subNum in list(enumerate(v))[::-1]:
						print('Split - Adding to stack:', (n+1,subNum,v,i))
						openSet.append((n+1,subNum,v,i))
				else:
					if v >= 10:
						p[index] = [v // 2, (v+1) // 2]
						keepGoing = True
						break

	def explode(self, index):
		pass

	def split(self, index):
		pass

	def getMagnitude(self):
		if isinstance(self.value, list):
			return 3 * getMagnitude(self.value[0]) + 2 * getMagnitude(self.value[1])
		else:
			return self.value


# test = SnailNumber([[[[0,7],4],[15,[0,13]]],[1,1]])
# print(test.value)

sumOfNumbers = SnailNumber(numbers[0])
for number in numbers[1:]:
	sumOfNumbers.addNumber(number)

print('Part 1:', sumOfNumbers.getMagnitude())

# highest = -1
# for num1 in numbers:
# 	for num2 in numbers:
# 		current = SnailNumber(num1)
# 		current.add(num2)
# 		currentMag = current.getMagnitude()
# 		highest = max(highest, currentMag)

# print('Part 2:', highest)